name: Reports

on:
  workflow_run:
    workflows: [.NET]
    types: [completed, requested]

jobs:
  vars:
    name: Get run information
    runs-on: ubuntu-latest
    outputs:
      run_info: ${{ steps.runInfo.outputs }}
      is_pr: ${{ steps.runInfo.outputs.pullRequestNumber > 0 }}
      sha_short: ${{ steps.vars.outputs.sha_short }}
    steps:
      - name: Get information about the source run
        id: runInfo
        uses: potiuk/get-workflow-origin@v1_3
        with:
          sourceRunId: ${{ github.event.workflow_run.id }}
      - name: Get short commit hash
        id: vars
        run: echo "::set-output name=sha_short::$(echo '${{ steps.runInfo.outputs.sourceHeadSha }}' | cut -c1-7)"
  before-run:
    name: Before Run
    needs: [vars]
    if: github.event.action == "requested" && needs.vars.outputs.is_pr
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Create body for pull request comment (initial edit)
        id: summary
        uses: actions/github-script@v6
        env:
          COMMIT_SHA: ${{ needs.vars.outputs.run_info.sourceHeadSha }}
          IS_INITIAL_EDIT: true
        with:
          result-encoding: string
          script: |
            const script = require('./.github/utils/cloudflare-summary.js');
            return await script({ context, core });
      - name: Find previous comment on pull request
        id: fc
        uses: peter-evans/find-comment@v2
        with:
          issue-number: ${{ needs.vars.outputs.run_info.pullRequestNumber }}
          comment-author: dalbitresb12-bot
          body-includes: Cloudflare Pages
      - name: Create or update comment on pull request
        uses: peter-evans/create-or-update-comment@v2
        with:
          token: ${{ secrets.BOT_PAT }}
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ needs.vars.outputs.run_info.pullRequestNumber }}
          body: ${{ steps.summary.outputs.result }}
          edit-mode: replace
  livingdoc-deploy:
    name: Deploy LivingDoc to Cloudflare Pages
    needs: [vars, before-run]
    if: github.event.action == "completed"
    runs-on: ubuntu-latest
    env:
      PROJECT_NAME: Starter.API
      CLOUDFLARE_PROJECT_NAME: netcore-webapi-starter-livingdoc
    outputs:
      deployment: ${{ steps.cloudflare.outputs }}
    steps:
      - name: Download LivingDoc artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          run_id: ${{ github.event.workflow_run.id }}
          name: ${{ env.PROJECT_NAME }}.Tests-LivingDoc-${{ runner.os }}-${{ needs.vars.outputs.sha_short }}
      - name: Move LivingDoc to output directory
        run: |
          mkdir dist
          mv LivingDoc.html dist/index.html
      - name: Publish to Cloudflare Pages
        id: cloudflare
        uses: cloudflare/pages-action@1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ env.CLOUDFLARE_PROJECT_NAME }}
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
  publish_report:
    name: Publish test report
    needs: [vars, before-run]
    if: github.event.action == "completed"
    runs-on: ubuntu-latest
    env:
      PROJECT_NAME: Starter.API
    outputs:
      report: ${{ steps.report.outputs }}
    steps:
      - name: Publish test report
        id: report
        uses: dorny/test-reporter@v1
        with:
          artifact: ${{ env.PROJECT_NAME }}.Tests-${{ runner.os }}-${{ needs.vars.outputs.sha_short }}
          name: Test Results
          path: "*.trx"
          reporter: dotnet-trx
          fail-on-error: 'false'
  after_run:
    name: After Run
    needs: [vars, before-run, livingdoc-deploy, publish_report]
    if: github.event.action == "completed"
    runs-on: ubuntu-latest
    steps:
      - name: Publish status to job summary and generate pull request comment
        id: summary
        env:
          COMMIT_SHA: ${{ needs.vars.outputs.run_info.sourceHeadSha }}
          TEST_REPORT: ${{ needs.publish_report.outputs.report }}
          CLOUDFLARE: ${{ needs.livingdoc-deploy.outputs.deployment }}
          BUILD_FAILED: ${{ github.event.workflow_run.conclusion == "failure" }}
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const script = require('./.github/utils/cloudflare-summary.js');
            return await script({ context, core });
      - name: Find previous comment on pull request
        id: fc
        uses: peter-evans/find-comment@v2
        with:
          issue-number: ${{ needs.vars.outputs.run_info.pullRequestNumber }}
          comment-author: dalbitresb12-bot
          body-includes: Cloudflare Pages
      - name: Create or update comment on pull request
        uses: peter-evans/create-or-update-comment@v2
        with:
          token: ${{ secrets.BOT_PAT }}
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ needs.vars.outputs.run_info.pullRequestNumber }}
          body: ${{ steps.summary.outputs.result }}
          edit-mode: replace
